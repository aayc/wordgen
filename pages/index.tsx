import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Checkbox } from "primereact/checkbox";
import { Slider } from "primereact/slider";
import { InputNumber } from "primereact/inputnumber";
import { InputText } from "primereact/inputtext";
import { Button } from "primereact/button";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import { GeneratorOptions, Sentiment, WordResult } from "../utils/types";
import WordResultTag from "../components/WordResultTag";

const Home: NextPage = () => {
  const [words, setWords] = useState<WordResult[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [numWords, setNumWords] = useState<number>(1);
  const [minLength, setMinLength] = useState(0);
  const [maxLength, setMaxLength] = useState(1000);
  const [startsWith, setStartsWith] = useState("");
  const [endsWith, setEndsWith] = useState("");
  const [sentimentBounds, setSentimentBounds] = useState<any>([0, 100]);
  const [freqBounds, setFreqBounds] = useState<any>([0, 100]);

  const parseSentiment = (sentiment: number): [number, Sentiment] => {
    const s = (sentiment - 50) / 50;
    if (s < -0.25) {
      return [s, "negative"];
    } else if (s > 0.25) {
      return [s, "positive"];
    } else {
      return [s, "neutral"];
    }
  };

  const requestWords = (): void => {
    const body: GeneratorOptions = {
      numWords,
      minLength,
      maxLength,
      startsWith,
      endsWith,
      sentimentBounds: [
        parseSentiment(sentimentBounds[0])[0],
        parseSentiment(sentimentBounds[1])[0],
      ],
      freqBounds,
    };

    setLoading(true);
    fetch("/api/words", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    })
      .then((res) => res.json())
      .then((data) => {
        setWords(data.words);
        setLoading(false);
      });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>All-in-One Word Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="my-8 flex justify-center">
        <div className="max-w-2xl">
          <h1 className="text-center">All-in-One Word Generator</h1>
          <p className="mt-8"># of words to generate:</p>
          <InputNumber
            value={numWords}
            onChange={(e) => setNumWords(e.value!)}
          />
          <p className="mt-8">Minimum # of letters:</p>
          <InputNumber
            value={minLength}
            onChange={(e) => setMinLength(e.value!)}
          />
          <p className="mt-4">Maximum # of letters:</p>
          <InputNumber
            value={maxLength}
            onChange={(e) => setMaxLength(e.value!)}
          />
          <p className="mt-4">Starts with:</p>
          <InputText
            value={startsWith}
            onChange={(e) => setStartsWith(e.target.value)}
          />
          <p className="mt-4">Ends with:</p>
          <InputText
            value={endsWith}
            onChange={(e) => setEndsWith(e.target.value)}
          />

          <p className="mt-4">
            Sentiment: {parseSentiment(sentimentBounds[0])[1]} (
            {parseSentiment(sentimentBounds[0])[0]}) to{" "}
            {parseSentiment(sentimentBounds[1])[1]} (
            {parseSentiment(sentimentBounds[1])[0]})
          </p>
          <Slider
            className="mt-4"
            value={sentimentBounds}
            onChange={(e) => setSentimentBounds(e.value)}
            range
          />

          <p className="mt-8">
            Word frequency: {freqBounds[0]}th percentile (less common) to{" "}
            {freqBounds[1]}th percentile (more common):
          </p>
          <Slider
            className="mt-4"
            value={freqBounds}
            onChange={(e) => setFreqBounds(e.value)}
            range
          />
          <div className="mt-4 flex justify-center">
            <Button
              label={
                loading
                  ? "Generating..."
                  : words.length == 0
                  ? "Generate"
                  : "Generate again"
              }
              className=""
              disabled={loading}
              onClick={requestWords}
            />
          </div>

          {words.length > 0 && (
            <div className="mt-8">
              <h1 className="text-center">Results:</h1>
              <div className="flex flex-wrap">
                {words.map((word) => (
                  <WordResultTag key={word.word} word={word} />
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Home;
